// Parse external representation of scheme data. This is also used by the scheme reader.
// The parsing into expressions and programs happens at a higher livel to be able to support
// better error messages and (eval)

datum = _{ simple_datum | compound_datum }

simple_datum   = _{  bool | symbol | character } 

bool      = _{ BOOL_TRUE | BOOL_FALSE }
symbol    = _{ IDENTIFIER | DELIMITED_IDENTIFIER | PECULIAR_IDENTIFIER }
character = _{ NAMED_CHAR_LITERAL | HEX_CHAR_LITERAL | UNICODE_CHAR_LITERAL | CHAR_LITERAL }


compound_datum          = _{ proper_list | abbreviation }
proper_list             = { L_PAREN ~ datum* ~ R_PAREN }
abbreviation            = { abbrev_prefix ~ datum }
abbrev_prefix           = _{ abbrev_quote | abbrev_quasi_quote | abbrev_unquote | abbrev_unquote_splicing }
abbrev_quote            = { "'" }
abbrev_quasi_quote      = { "`" }
abbrev_unquote          = { "," }
abbrev_unquote_splicing = { ",@" }

/////////////////////////////////////
// Tokens 
/////////////////////////////////////

// Bool

BOOL_TRUE  = { "#true" | "#t" }
BOOL_FALSE = { "#false" | "#f" }


// Symbol

IDENTIFIER           = @{ INITIAL ~ SUBSEQUENT* }
INITIAL              = _{ LETTER | SPECIAL_INITIAL }
LETTER               = _{ ASCII_ALPHA }
SPECIAL_INITIAL      = _{ "!" | "$" | "%" | "&" | "*" | "/" | ":" | "<" | "=" | ">" | "?" | "^" | "_" | "~" }
SUBSEQUENT           = _{ INITIAL | DIGIT | SPECIAL_SUBSEQUENT }
DIGIT                = _{ ASCII_DIGIT }
SPECIAL_SUBSEQUENT   = _{ EXPLICIT_SIGN | "." | "@" }
EXPLICIT_SIGN        = _{ "+" | "-" }

DELIMITED_IDENTIFIER = @{ VERTICAL_LINE ~ SYMBOL_ELEMENT* ~ VERTICAL_LINE }
VERTICAL_LINE        = _{ "|" }
SYMBOL_ELEMENT       = _{ INLINE_HEX_ESCAPE | MNEMONIC_ESCAPE | !(VERTICAL_LINE | "\\") ~ ANY }
INLINE_HEX_ESCAPE    = _{ "\\x" ~ HEX_SCALAR_VALUE ~ ";" }
MNEMONIC_ESCAPE      = @{ "\\" ~ ("a" | "b" | "t" | "n" | "r") }

PECULIAR_IDENTIFIER  = @{ EXPLICIT_SIGN ~ SIGN_SUBSEQUENT ~ SUBSEQUENT* | EXPLICIT_SIGN ~ "." ~ DOT_SUBSEQUENT | "." ~ DOT_SUBSEQUENT ~ SUBSEQUENT* | EXPLICIT_SIGN }
SIGN_SUBSEQUENT      = _{ INITIAL | EXPLICIT_SIGN | "@" }
DOT_SUBSEQUENT       = _{ SIGN_SUBSEQUENT | "." }

// Char

NAMED_CHAR_LITERAL   = @{ "#\\" ~ CHARACTER_NAME }
CHARACTER_NAME       = _{ "alarm" | "backspace" | "delete" |  "escape" | "newline" | "null" | "return" | "space" | "tab" }

HEX_CHAR_LITERAL     = @{ "#\\x" ~ HEX_SCALAR_VALUE }
UNICODE_CHAR_LITERAL = @{ "#\\u" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT? ~ ASCII_HEX_DIGIT? ~ ASCII_HEX_DIGIT? }
CHAR_LITERAL         = @{ "#\\" ~ ANY }


// Misc

HEX_SCALAR_VALUE = _{ ASCII_HEX_DIGIT+ }
L_PAREN          = _{ "(" }
R_PAREN          = _{ ")" }