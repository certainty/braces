// Parse external representation of scheme data. This is also used by the scheme reader.
// The parsing into expressions and programs happens at a higher livel to be able to support
// better error messages and (eval)

datum = _{ simple_datum | compound_datum }

simple_datum   = _{  bool | symbol } 

bool   = _{ BOOL_TRUE | BOOL_FALSE }
symbol = _{ IDENTIFIER | DELIMITED_IDENTIFIER | PECULIAR_IDENTIFIER }


compound_datum          = _{ proper_list | abbreviation }
proper_list             = { L_PAREN ~ datum* ~ R_PAREN }
abbreviation            = { abbrev_prefix ~ datum }
abbrev_prefix           = { abbrev_quote | abbrev_quasi_quote | abbrev_unquote | abbrev_unquote_splicing }
abbrev_quote            = _{ "'" }
abbrev_quasi_quote      = _{ "`" }
abbrev_unquote          = _{ "," }
abbrev_unquote_splicing = _{ ",@" }

/////////////////////////////////////
// Tokens 
/////////////////////////////////////

BOOL_TRUE  = { "#true" | "#t" }
BOOL_FALSE = { "#false" | "#f" }


IDENTIFIER           = @{ INITIAL ~ SUBSEQUENT* }
INITIAL              = _{ LETTER | SPECIAL_INITIAL }
LETTER               = _{ ASCII_ALPHA }
SPECIAL_INITIAL      = _{ "!" | "$" | "%" | "&" | "*" | "/" | ":" | "<" | "=" | ">" | "?" | "^" | "_" | "~" }
SUBSEQUENT           = _{ INITIAL | DIGIT | SPECIAL_SUBSEQUENT }
DIGIT                = _{ ASCII_DIGIT }
SPECIAL_SUBSEQUENT   = _{ EXPLICIT_SIGN | "." | "@" }
EXPLICIT_SIGN        = _{ "+" | "-" }

DELIMITED_IDENTIFIER = @{ VERTICAL_LINE ~ SYMBOL_ELEMENT* ~ VERTICAL_LINE }
VERTICAL_LINE        = _{ "|" }
SYMBOL_ELEMENT       = _{ INLINE_HEX_ESCAPE | MNEMONIC_ESCAPE | !(VERTICAL_LINE | "\\") ~ ANY }
INLINE_HEX_ESCAPE    = _{ "\\x" ~ HEX_SCALAR_VALUE }
HEX_SCALAR_VALUE     = _{ ASCII_HEX_DIGIT+ }
MNEMONIC_ESCAPE      = @{ "\\" ~ ("a" | "b" | "t" | "n" | "r") }

PECULIAR_IDENTIFIER  = @{ EXPLICIT_SIGN ~ SIGN_SUBSEQUENT ~ SUBSEQUENT* | EXPLICIT_SIGN ~ "." ~ DOT_SUBSEQUENT | "." ~ DOT_SUBSEQUENT ~ SUBSEQUENT* | EXPLICIT_SIGN }
SIGN_SUBSEQUENT      = _{ INITIAL | EXPLICIT_SIGN | "@" }
DOT_SUBSEQUENT       = _{ SIGN_SUBSEQUENT | "." }




L_PAREN       = _{ "(" }
R_PAREN       = _{ ")" }